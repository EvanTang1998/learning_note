进程miltiprocess.Process()  ； 线程threading.Thread() 协程(异步async) CPU密集型 I/O密集型
1. 进程（multiprocessing.Process()）： 并行  独立的运行单位，每个进程有独立的内存空间，适合 CPU 密集型任务。
2. 线程（threading.Thread()）：并发  进程内的轻量级执行单位，共享内存，适合 I/O 密集型任务。
3. 协程（异步 async）：并发  单线程内的非阻塞任务调度，通过事件循环实现并发，适合大量 I/O 密集型任务。
* 使用异步编程时必须使用异步支持的函数。可以使用 run_in_executor 将阻塞任务交给线程池处理
1. CPU 密集型：并行  运算占用 CPU 时间多的任务，如大规模计算、图像处理。
2. I/O 密集型：并发  等待外部设备（如磁盘、网络）响应时间长的任务，如文件操作、网络请求。

CPU 密集型 和 I/O 密集型的对比：
类型	举例	瓶颈所在	优化方式	适用工具
CPU 密集型	大数计算，视频编码	CPU 运算速度	提高计算效率、并行计算	多进程（multiprocessing）
I/O 密集型	读写文件 数据库查询
网络请求（如爬虫程序、API 调用）
视频流下载、上传。	外部设备响应速度	并发处理（异步、多线程）	异步（asyncio）、多线程
异步是一种基于协程（coroutine）的编程模型。
